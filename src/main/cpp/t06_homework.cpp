//Учительница задала Пете домашнее задание — в заданном тексте расставить ударения в словах, 
// после чего поручила Васе проверить это домашнее задание. 
// Вася очень плохо знаком с данной темой, поэтому он нашел словарь, 
// в котором указано, как ставятся ударения в словах. 
// К сожалению, в этом словаре присутствуют не все слова. 
// Вася решил, что в словах, которых нет в словаре, он будет считать, 
// что Петя поставил ударения правильно, если в этом слове Петей поставлено ровно одно ударение.
//
//Оказалось, что в некоторых словах ударение может быть поставлено больше, чем одним способом. 
// Вася решил, что в этом случае если то, как Петя поставил ударение, 
// соответствует одному из приведенных в словаре вариантов, 
// он будет засчитывать это как правильную расстановку ударения, 
// а если не соответствует, то как ошибку.
//
//Вам дан словарь, которым пользовался Вася и домашнее задание, сданное Петей. 
// Ваша задача — определить количество ошибок, которое в этом задании насчитает Вася.
//
//Входные данные
//
//Вводится сначала число N — количество слов в словаре (0 ≤ N ≤ 20000).
//
//Далее идет N строк со словами из словаря. Каждое слово состоит не более чем из 30 символов. 
// Все слова состоят из маленьких и заглавных латинских букв. 
// В каждом слове заглавная ровно одна буква — та, на которую попадает ударение. 
// Слова в словаре расположены в алфавитном порядке. 
// Если есть несколько возможностей расстановки ударения в одном и том же слове, 
// то эти варианты в словаре идут в произвольном порядке.
//
//Далее идет упражнение, выполненное Петей. Упражнение представляет собой строку текста, 
// суммарным объемом не более 300000 символов. Строка состоит из слов, 
// которые разделяются между собой ровно одним пробелом. 
// Длина каждого слова не превышает 30 символов. 
// Все слова состоят из маленьких и заглавных латинских букв 
// (заглавными обозначены те буквы, над которыми Петя поставил ударение). 
// Петя мог по ошибке в каком-то слове поставить более одного ударения или не поставить ударения вовсе.
//
//Выходные данные
//
//Выведите количество ошибок в Петином тексте, которые найдет Вася.
//
//Примечание к примеру
//
//
//1. В слове cannot, согласно словарю возможно два варианта расстановки ударения. 
// Эти варианты в словаре могут быть перечислены в любом порядке 
// (т.е. как сначала cAnnot, а потом cannOt, так и наоборот).
//Две ошибки, совершенные Петей — это слова be (ударение вообще не поставлено) 
// и fouNd (ударение поставлено неверно). Слово thE отсутствует в словаре, 
// но поскольку в нем Петя поставил ровно одно ударение, признается верным.
//
//2. Неверно расставлены ударения во всех словах, кроме The (оно отсутствует в словаре,
// в нем поставлено ровно одно ударение). В остальных словах либо ударные все буквы (в слове PAGE),
// либо не поставлено ни одного ударения.
//
//
//Sample Input 1:
//
//4
//cAnnot
//cannOt
//fOund
//pAge
//thE pAge cAnnot be fouNd
//
//Sample Output 1:
//
//2
//
//Sample Input 2:
//
//4
//cAnnot
//cannOt
//fOund
//pAge
//The PAGE cannot be found
//Sample Output 2:
//
//4

#include "t06_homework.h"
#include <iostream>
#include <set>
#include <string>

using namespace std;

char make_little(char);

int t06_homework() {
    set<string> dict, phrase, stress1, little;
    string word, homework;
    int N=0, errors=0;
    cin >> N;
    for (int i = 0; i < N; i++) {
        cin >> word;
        dict.insert(word);
    }
    getline(cin, homework);
    homework += ' ';
    N = 0;
    int s1 = homework.size();
    for (int i = 0; i < s1; i++) {
        if (homework[i] != ' ')
            N++;
        else{
            word = homework.substr(i-N, N);
            phrase.insert(word);
            N = 0;
        }
    }
    for (const auto& i: phrase){
        N=0;
        for (char j : i) {
            if ((int(j) > 64)&&(int(j) < 91)) N++;
        }
        if ((N>1)||(N==0)) {
            errors++;
        }
        else stress1.insert(i);
    }
    phrase.clear();
    N = dict.size();
    for (const auto& i: stress1) {
        dict.insert(i);
        if (dict.size() > N){
            dict.erase(i);
            phrase.insert(i);
        }
    }
    word = "";
    for (const auto& i: dict){
        for (char j : i){
            j = make_little(j);
            word += j;
        }
        little.insert(word);
        word = "";
    }
    N = little.size();
    for (const auto& i: phrase){
        for (char j : i) {
                j = make_little(j);
                word += j;
            }
        little.insert(word);
        word = "";
        if (little.size() == N){
            errors++;
        }
        else N++;
    }
    cout << errors - 1;
    return 0;
}

char make_little (char x) {
    if ((int(x) > 64) && (int(x) < 91)) {
        x = char(int(x) + 32);
    }
    return x;
}