//Учительница задала Пете домашнее задание — в заданном тексте расставить ударения в словах, 
// после чего поручила Васе проверить это домашнее задание. 
// Вася очень плохо знаком с данной темой, поэтому он нашел словарь, 
// в котором указано, как ставятся ударения в словах. 
// К сожалению, в этом словаре присутствуют не все слова. 
// Вася решил, что в словах, которых нет в словаре, он будет считать, 
// что Петя поставил ударения правильно, если в этом слове Петей поставлено ровно одно ударение.
//
//Оказалось, что в некоторых словах ударение может быть поставлено больше, чем одним способом. 
// Вася решил, что в этом случае если то, как Петя поставил ударение, 
// соответствует одному из приведенных в словаре вариантов, 
// он будет засчитывать это как правильную расстановку ударения, 
// а если не соответствует, то как ошибку.
//
//Вам дан словарь, которым пользовался Вася и домашнее задание, сданное Петей. 
// Ваша задача — определить количество ошибок, которое в этом задании насчитает Вася.
//
//Входные данные
//
//Вводится сначала число N — количество слов в словаре (0 ≤ N ≤ 20000).
//
//Далее идет N строк со словами из словаря. Каждое слово состоит не более чем из 30 символов. 
// Все слова состоят из маленьких и заглавных латинских букв. 
// В каждом слове заглавная ровно одна буква — та, на которую попадает ударение. 
// Слова в словаре расположены в алфавитном порядке. 
// Если есть несколько возможностей расстановки ударения в одном и том же слове, 
// то эти варианты в словаре идут в произвольном порядке.
//
//Далее идет упражнение, выполненное Петей. Упражнение представляет собой строку текста, 
// суммарным объемом не более 300000 символов. Строка состоит из слов, 
// которые разделяются между собой ровно одним пробелом. 
// Длина каждого слова не превышает 30 символов. 
// Все слова состоят из маленьких и заглавных латинских букв 
// (заглавными обозначены те буквы, над которыми Петя поставил ударение). 
// Петя мог по ошибке в каком-то слове поставить более одного ударения или не поставить ударения вовсе.
//
//Выходные данные
//
//Выведите количество ошибок в Петином тексте, которые найдет Вася.
//
//Примечание к примеру
//
//
//1. В слове cannot, согласно словарю возможно два варианта расстановки ударения. 
// Эти варианты в словаре могут быть перечислены в любом порядке 
// (т.е. как сначала cAnnot, а потом cannOt, так и наоборот).
//Две ошибки, совершенные Петей — это слова be (ударение вообще не поставлено) 
// и fouNd (ударение поставлено неверно). Слово thE отсутствует в словаре, 
// но поскольку в нем Петя поставил ровно одно ударение, признается верным.
//
//2. Неверно расставлены ударения во всех словах, кроме The (оно отсутствует в словаре,
// в нем поставлено ровно одно ударение). В остальных словах либо ударные все буквы (в слове PAGE),
// либо не поставлено ни одного ударения.
//
//
//Sample Input 1:
//
//4
//cAnnot
//cannOt
//fOund
//pAge
//thE pAge cAnnot be fouNd
//
//Sample Output 1:
//
//2
//
//Sample Input 2:
//
//4
//cAnnot
//cannOt
//fOund
//pAge
//The PAGE cannot be found
//Sample Output 2:
//
//4

#include "t06_homework.h"
#include <iostream>
#include <set>
#include <map>
#include <string>
#include <cctype>

using namespace std;

int t06_homework() {
    set <string> d1;
    multiset <string> hw1;
    map <string,string> d;
    map <string,string> hw;
    int n,v=0,c,err=0,r=0,b=0,rs=0;;
    string a,a2;
    char a1;
    cin>>n;

    for (int i=0;i<n;i++) {
        cin>>a;
        a2="";
        for (int j=0;j<a.length();j++){
            a1= toupper(a[j]);
            a2+=a1;
        }
        d1.insert(a);
        d[a]=a2;
    }
    for (int i=0;i<5;i++) {
        cin>>a;
        a2="";
        for (int j=0;j<a.length();j++){
            a1= toupper(a[j]);
            a2+=a1;
        }
        hw1.insert(a);
        hw[a]=a2;
    }
    
    
    
    for (auto i=hw1.begin();i!=hw1.end();i++) {
        string h=*i;
        v=err;
        b=0;
        r=0;
        rs=0;
        for (int k=0; k<h.length();k++) {
                if (h[k]==toupper(h[k])) {
                    b++;
                }
        }
        if (b!=1) {
            err++;
        }
        if (err==v) {
            for (auto j=d1.begin();j!=d1.end();j++) {
                if (hw[*i]==d[*j]) {
                    if(*i==*j) {
                        r++;
                    } 
                    else {
                        rs++;
                    }
                }
            }
            if (r==0 && rs!=0) {
                err++;
            }
        }
    }
    cout<<err;
    return 0;
}

